class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0)    return 0;
        int rows  = grid.length;
        int cols = grid[0].length;
        int islands = 0;
        for(int i = 0 ;i < rows ; i++){
            for(int j = 0 ; j < cols ; j++){
                if(grid[i][j]=='1'){
                    dfs(grid, i , j , rows , cols);
                    islands++;
                }
            }
        }
        return islands;
    }

    public void dfs(char[][] grid , int i , int j , int rows , int cols){
        if(i < 0 || i >=rows || j < 0 || j>=cols || grid[i][j] != '1')  return;
        grid[i][j] = '2';
        dfs(grid , i - 1 , j , rows , cols);
        dfs(grid , i +1 , j , rows , cols);
        dfs(grid , i ,  j -1 , rows  , cols);
        dfs(grid , i , j +1 , rows , cols);
    }
}
