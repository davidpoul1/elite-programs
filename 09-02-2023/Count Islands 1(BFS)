import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Pair{
    int row;
    int col;
    public Pair(int row, int col){
        this.row = row;
        this.col = col;
    }
}
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        boolean Visited[][] = new boolean[n][m];
        int grid[][] = new int[n][m];
        for(int i  = 0 ; i< n ; i++){
            for(int j = 0 ; j< m ;j++){
                grid[i][j] = input.nextInt();
            }
        }
        int islands =0 ;
        for(int i = 0 ; i< n ; i++){
            for(int  j = 0 ; j < m ; j++){
                if(grid[i][j] == 1 && Visited[i][j] == false){
                    islands++;
                    NumberOfIslands(grid , i , j , n , m,  Visited);
                }
            }
        }
        System.out.println(islands);
    }
    
    public static void NumberOfIslands(int grid[][] , int i , int j , int rows , int cols,  boolean[][] Visited ){
        Queue<Pair> queue = new LinkedList<>();
        Visited[i][j] = true;
        queue.add(new Pair(i ,j));
        while(!queue.isEmpty()){
            Pair p = queue.poll();
            int r = p.row;
            int c = p.col;
            int delrow[] = {-1 , -1 , -1 , 0 , 1 , 1 , 1 , 0};
            int delcol[] = {-1 , 0, 1 , 1 , 1 , 0 , -1 , -1 };
            for(int k = 0 ;k < 8 ;k++){
                int nrow = r + delrow[k];
                int ncol = c + delcol[k];
                if(nrow < rows && nrow >= 0 && ncol < cols && ncol >= 0 && grid[nrow][ncol] == 1 && Visited[nrow][ncol] == false){
                    Visited[nrow][ncol] = true;
                    queue.add(new Pair(nrow , ncol));
                    
                }
            }
        }
    }
}
