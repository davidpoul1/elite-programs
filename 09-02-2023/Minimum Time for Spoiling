import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Pair{
    int row; 
    int col;
    int tm;
    public Pair(int row ,int col , int tm){
        this.row = row;
        this.col = col;
        this.tm = tm;
    }
}
public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        int grid[][] = new int[n][m];
        int Visited[][] = new int[n][m];
        for(int i = 0 ;i < n ;i++){
            for(int j = 0 ; j< m ; j++){
                grid[i][j] = input.nextInt();
            }
        }
        Queue<Pair> queue = new LinkedList<>();
        for(int i = 0 ;i < n ;i++){
            for(int j = 0 ; j< m ; j++){
                if(grid[i][j] == 2){
                    Visited[i][j] = 2;
                    queue.add(new Pair(i , j , 0));
                }
                else Visited[i][j] = 0;
            }
        }
        int tm = 0;
        while(!queue.isEmpty()){
            Pair p = queue.poll();
            int r = p.row;
            int c = p.col;
            int t = p.tm;
            tm = Math.max(tm ,t);
            int[] delrow = {-1 , 0 , 1 , 0};
            int[] delcol = {0 , 1 , 0 , -1};
            for(int i = 0 ; i< 4; i++){
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                if(nrow < n && nrow >=0 && ncol < m && ncol >=0 && grid[nrow][ncol] == 1 && Visited[nrow][ncol] == 0){
                    queue.add(new Pair(nrow ,ncol , t+1));
                    Visited[nrow][ncol] = 2;
                }
            }
        }
        for(int i = 0 ;i < n ;i++){
            for(int j = 0 ; j< m ; j++){
                if(grid[i][j] == 1 && Visited[i][j] == 0){
                    System.out.println(-1);
                    return;
                }    
            }
        }
        System.out.println(tm);
    }
}
