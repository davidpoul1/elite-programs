/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        if(list.size() == 0){
            list.add(root.val);
        }
        queue.add(root);
        boolean val = true;
        if(list.size() != 0){
            while(!queue.isEmpty()){
                int size = queue.size();
                for(int i = 1 ;i <= size ; i++){
                    TreeNode curr = queue.poll();
                    if(i == size && val == false){
                        list.add(curr.val);
                    }
                    if(curr.left != null){
                        queue.add(curr.left);
                       /* if(i+1 == size){
                            list.add(curr.left.val);
                        }*/
                    }
                    if(curr.right != null){
                        queue.add(curr.right);
                    }
                     /*if(i == size && curr.right != null){
                            list.add(curr.right.val);
                    }
                    if(i == size && curr.left != null && curr.right == null){
                        list.add(curr.left.val);
                    }
                    if( i == size){
                        list.add(curr.val);
                    }*/
                    val = false;
                }
            }
        }
        return list;
    }
}
