/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        if(list.size() == 0){
            List<Integer> r = new ArrayList<>();
            r.add(root.val);
            list.add(r);
        }
        queue.add(root);
        int n = 1;
        if(list.size() != 0){
        while(!queue.isEmpty()){
            List<Integer> row = new ArrayList<>();
            Stack<Integer> stack = new Stack<>();
            int size = queue.size();
            for(int i = 0 ; i < size ; i++){
                TreeNode curr = queue.poll();
                if(curr.left != null){
                    if(n%2 == 0) row.add(curr.left.val);
                    else stack.push(curr.left.val);
                    queue.add(curr.left);
                }
                if(curr.right != null){
                    if(n%2 == 0) row.add(curr.right.val);
                    else stack.push(curr.right.val);
                    queue.add(curr.right);
                }
            }
            n++;
            while(!stack.isEmpty() ){
                row.add(stack.pop());
            }
            if(row.size() > 0){
                list.add(row);
            }

        }
        return list;
        }
        return list;
    }
}
