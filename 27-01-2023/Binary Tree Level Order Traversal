/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        Queue<TreeNode> queue  = new LinkedList<>();
        queue.add(root);
        List<Integer> r = new ArrayList<>();
        r.add(root.val);
        list.add(r);
        if(root.left != null || root.right != null){
        while(!queue.isEmpty()){
            List<Integer> row = new ArrayList<>();
            int size = queue.size();
            for(int i = 1 ;i <= size ; i++){
                TreeNode curr = queue.poll();
                /*if(curr != null && curr.right == null && curr.left == null){
                    row.add(curr.val);
                    k++;
                }*/
                if(curr.left != null  ){
                    row.add(curr.left.val);
                    queue.add(curr.left);
                }
                if(curr.right != null  ){
                    row.add(curr.right.val);
                    queue.add(curr.right);
                }
                //k=0;
            }
            if(row.size() != 0)
            list.add(row);
        }
        return list;
        }
        return list;
    }
}
