/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        List<Integer> l = new ArrayList<>();
        l.add(root.val);
        Stack<List> stack = new Stack<>();
        stack.push(l);
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        if(l.size() != 0){
            while(queue.size() != 0){
                int size = queue.size();
                List<Integer> row = new ArrayList<>();
                for(int i =0 ;i < size ; i++){
                    TreeNode curr = queue.poll();
                    if(curr.left != null){
                        row.add(curr.left.val);
                        queue.add(curr.left);
                    }
                    if(curr.right != null){
                        row.add(curr.right.val);
                        queue.add(curr.right);
                    }
                }
                if(row.size() != 0) stack.push(row);
            }
        }
        while(!stack.isEmpty()){
            list.add(stack.pop());
        }
        return list;
    }
}
