/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i  =0 ;i < inorder.length; i++){
            map.put(inorder[i] , i);
        }
        TreeNode root = build(postorder , 0 , postorder.length-1 , inorder , 0 , inorder.length-1 , map);
        return root;
    }

    public TreeNode build(int[] postorder , int postStart , int postEnd , int[] inorder , int inStart , int inEnd , Map<Integer , Integer> map){
        if(postStart > postEnd){
            return null;
        }
        TreeNode root = new TreeNode(postorder[postEnd]);
        if(postStart == postEnd || inStart == inEnd){
            return root;
        }
        int index = map.get(postorder[postEnd]);
        int diff = index - inStart -1;
        root.left = build(postorder , postStart , postStart + diff , inorder , inStart , index-1 , map);
        root.right = build(postorder , postStart + diff + 1 , postEnd -1 , inorder , index +1 , inEnd , map);
        return root;
    }
}
