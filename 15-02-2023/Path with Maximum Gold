class Solution {
    public int getMaximumGold(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int total=0, max =0;
        if(n ==1&& m ==1)   return grid[0][0];
        for(int i = 0;i< m;i++){
            for(int j  =0;j<n;j++){
                if(grid[i][j] !=0){
                    total = dfs(grid , i ,j , m,n , new boolean[m][n]);
                }
                //System.out.println(total);
                max = Math.max(max , total);
            }
        }
        return max;
    }

    public int dfs(int[][] grid , int i , int j , int row , int col , boolean[][] vis){
        if(i<0||i>=row||j<0||j>=col||grid[i][j] ==0||vis[i][j]) return 0;
        vis[i][j] = true;
        int left = dfs(grid, i,j-1,row,col,vis);
        int down = dfs(grid, i+1,j,row,col,vis);
        int right = dfs(grid, i,j+1,row,col,vis);
        int top = dfs(grid, i-1,j,row,col,vis);
        vis[i][j] = false;
        return Math.max(left,Math.max(down,Math.max(right,top)))+grid[i][j];
    }
}
