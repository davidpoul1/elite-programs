class Pair{
    int row;
    int col;
    int tm;
    public Pair(int row , int col , int tm){
        this.row = row;
        this.col = col;
        this.tm = tm;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        Queue<Pair> queue  = new LinkedList<>();
        int Visited[][] = new int[n][m];
        for(int i = 0 ;i < n ;i++){
            for(int j =0 ;j < m ; j++){
                if(grid[i][j] == 2){
                    queue.add(new Pair(i  , j , 0));
                    Visited[i][j] = 2;
                }
                else    Visited[i][j] = 0;
            }
        }
        int tm = 0;
        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};
        while(!queue.isEmpty()){
            Pair  p = queue.poll();
            tm = Math.max(tm , p.tm);
            for(int i = 0 ; i < 4; i++){
                int nrow = p.row+ delrow[i];
                int ncol = p.col + delcol[i];
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && Visited[nrow][ncol] ==0 && grid[nrow][ncol] == 1){
                    queue.add(new Pair(nrow , ncol , p.tm+1));
                    Visited[nrow][ncol] = 2;
                }
            }
        }
        for(int i =0 ;i < n ; i++){
            for(int j =  0 ; j < m ; j++){
                if(Visited[i][j] == 0 && grid[i][j] == 1)   return -1;
            }       
        }
        return tm;
    }
}
